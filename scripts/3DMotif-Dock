#!/bin/bash
function help(){
cat<<HELP

Usage: MotifDock [OPTION] <parameter>

Example: 
1) PDS library Geneation:
Motif-Dock -i INPUT_PDB_LIB -n 40 -1
## This step will return a INPUT_PDB_LIB-Index file.

2) Motif Docking:
## for flexible motif.
Motif-Dock -m Motif_1.pdb -r Receptor.pdb -l INPUT_PDB_LIB-Index -n 40 -d 1.0 -3 
## for stable motif.
Motif-Dock -m Motif_2.pdb -r Receptor.pdb -l INPUT_PDB_LIB-Index -n 40 -d 0.6 -3 
## Normal Solution, it takes a lot of time.
Motif-Dock -m Motif_2.pdb -r Receptor.pdb -l INPUT_PDB_LIB-Index -n 40 -d 0.8

Note: Make sure julia\MAESTER\Parallel\Python3 in your \$PATH!

Expected Output:
1. INPUT-Motif-FINAL_interface_score_OUT.sc: The final socre file.
2. INPUT-Motif-Jd2-OUT: This dir contains the final complexes of your receptor structure with the structure which is in your INPUT lib as well as matched to your motif structure.
3. INPUT-Motif-Relax: The refined complexes for INPUT-Motif-Jd2-OUT.
4. INPUT-Motif-Jd2-?(Target_Chainname).fasta: The sequences of matched motif structures.

Input parameter:
  -m    A pdb file to define a structure motif.
  -i	Your Interested PDB library.
  -r    A receptor strcuture Corresponding to your motif!
  -d    RMSD cutoff for matching.
  -c    Set a chain name of target, default is B.
  -q    How many top complexes will be relax. <500>
  -g    Motif to match with a gap in range. <"5-20">

  -n    The Max number of CPU threads available for this job, default is 40.
  -a    Path to Rosetta app, defalut is \$rosetta_app
  -b    Path to Rosetta app, defalut is \$rosetta_db
  -l    Input a PDS index list from MAESTER.

Control Parameter:
-1 Turn off except PDS Library Generation.
-2 Turn off Rosetta_Jd2 and Rosetta_Interface_Score.
-3 Turn off Rosetta_Relax. It is recommended for the first time to use.

Thank you for your using, If you found any problem, Please contact wanglin3@shanghaitech.edu.cn.
HELP
}

function ParseChainLib(){
    #ParseChainLib PDBChainLib OUTPUTlib IndexList
    OriginLib=$1
    OUTPUTlib=$2
    IndexList=$3
    cat << JULIA > ParseChain.jl
#!/mnt/g/julia-1.4.2/bin/julia
using PDBTools

function setChainname_to_$Target_ChainName!(chain)
    for atom in chain
        atom.chain = "$Target_ChainName"
    end
    chain
end

function setchainname(inputpdb::AbstractString,singlechainDB,ParsedsinglechainDB)
    try
        chain = readPDB("\$singlechainDB/\$inputpdb")
        setChainname_to_$Target_ChainName!(chain)
        writePDB(chain,"\$ParsedsinglechainDB/\$inputpdb")
        println("success: \$inputpdb")
    catch e0
        println("error: \$inputpdb")
    end
end

print("What's path of your single chain pdb library?\n")
const singlechainDB=readline(stdin)
print("What's path of your output pdb library?\n")
const ParsedsinglechainDB=readline(stdin)
Threads.@threads for inputpdb in readdir(singlechainDB)
    endswith(inputpdb,".pdb") && setchainname(inputpdb,singlechainDB,ParsedsinglechainDB)
end
JULIA
    mkdir -p $OUTPUTlib
    (echo $OriginLib; echo $OUTPUTlib) | julia -p $CPUnum ParseChain.jl
    CurrentWorkdir=$PWD
    cd $OUTPUTlib
    ls | parallel -j $CPUnum createPDS --pdb {} --seqID 0.98 --cleanPDB --type target
    ls | grep "pds$" | parallel -j $CPUnum echo "$PWD/{}" >> $CurrentWorkdir/$IndexList
    cd $CurrentWorkdir
}

function ex_Seq(){
    PDB_OUT_dir=$1
cat<< SEQ > ex_seq.jl
using BioStructures

function get_decoy_motif(decoy_structure,decoy_motif_region,decoy_motif_length,decoy_chain_id,template,out_fasta,motif_N,motif_C,error)
    try
        template_structure = read(template, PDB)
        res_id = 0
        distance_N = 0
        distance_C = 0
        template_N = 0
        template_C = 0
        chain = collectresidues(template_structure["$Target_ChainName"])
        for res in chain
            res_id == 0 && (template_N = resnumber(res))
            res_id == 0 && (distance_N = distance(decoy_structure[decoy_chain_id][motif_N], res, calphaselector))
            res_id == 0 && (template_C = resnumber(res))
            res_id == 0 && (distance_C = distance(decoy_structure[decoy_chain_id][motif_C], res, calphaselector))
            res_id+=1
            if distance(decoy_structure[decoy_chain_id][motif_N], res) <= distance_N 
                template_N = resnumber(res)
                distance_N = distance(decoy_structure[decoy_chain_id][motif_N], res) 
            end
            if distance(decoy_structure[decoy_chain_id][motif_C], res) <= distance_C
                template_C = resnumber(res)
                distance_C = distance(decoy_structure[decoy_chain_id][motif_C], res)
            end
        end
        N_candidates = [ template_N, template_C - decoy_motif_length + 1, template_N + 1, template_N - 1 ]
        C_candidates = [ template_C, template_N + decoy_motif_length - 1, template_C + 1, template_C - 1 ]
        out_seq_N = template_N
        out_seq_C = template_C
        best_rmsd_val = 1000
        for template_N in N_candidates
            for template_C in C_candidates
                motif_region = collectresidues(template_structure["$Target_ChainName"], res -> template_N <= resnumber(res) <= template_C )
                if countresidues(decoy_motif_region) == countresidues(motif_region)
                    rmsd_val = rmsd(motif_region, decoy_motif_region, superimpose=false)
                    if rmsd_val <= best_rmsd_val
                        best_rmsd_val = rmsd_val
                        out_seq_N = template_N
                        out_seq_C = template_C
                    end
                end
            end
        end
        motif_region = collectresidues(template_structure["$Target_ChainName"], res -> out_seq_N <= resnumber(res) <= out_seq_C )
        fasta_seq = LongAminoAcidSeq(motif_region)
        write(out_fasta,">\$template:\$fasta_seq \n")
    catch e1
        write(error,"Error: \$template.\n")
        write(error,"\$e1\n\n")
    end
end

function main()
    decoy_pdb="${Motifpdb}"
    template_library="${PDB_OUT_dir}"
    decoy_structure = read(decoy_pdb, PDB)
    out_fasta = open("$(basename ${PDB_OUT_dir}).fasta", "w")
    error = open("ex_seq.error", "w")
    res_id = 0
    motif_N = 0
    motif_C = 0
    decoy_chain_id = 0
    for model in decoy_structure
        for chain in model
            decoy_chain_id = chainid(chain)
            for res in chain
                res_id == 0 && (motif_N = resnumber(res))
                res_id == 0 && (motif_C = resnumber(res))
                res_id+=1
                resnumber(res) < motif_N && (motif_N = resnumber(res))
                resnumber(res) > motif_C && (motif_C = resnumber(res))
            end
        end
    end
    decoy_motif_region = collectresidues(decoy_structure, res -> motif_N <= resnumber(res) <= motif_C)
    decoy_motif_length = motif_C - motif_N + 1
    Threads.@threads for template in readdir(template_library)
        get_decoy_motif(decoy_structure,decoy_motif_region,decoy_motif_length,decoy_chain_id,"\$template_library/\$template",out_fasta,motif_N,motif_C,error)
    end
end
main()
SEQ
julia -p $CPUnum ex_seq.jl
}

PDBinputPath="INPUT"
Motifpdb="Motif.pdb"
Receptor="Receptor.pdb"
CPUnum="40"
rmsdCutoff="1.0"
Matching="true"
JdRefine="true"
InterScore="true"
relaxnum="1"
Target_ChainName="B"
Relax_Num=500
with_gap=false
gap_len="5-20"

while getopts ":hm:i:r:d:n:a:b:p:l:c:q:w1234g:" opt
do
  case $opt in
    h)
        help
        exit;;
    m)
        Motifpdb=`readlink -f $OPTARG`;;
    i)
        PDBinput="true"
        PDBinputPath=`readlink -f $OPTARG`;;
    l)
        PDSinput="true"
        PDSlist=`readlink -f $OPTARG`;;
    r)
        Receptor=`readlink -f $OPTARG`;;
    c)
        Target_ChainName=$OPTARG;;
    q)
        Relax_Num=$OPTARG;;
    n)
        CPUnum=$OPTARG;;
    d)
        rmsdCutoff=$OPTARG;;
    g)
        with_gap=true
        gap_len=$OPTARG;;
    a)
        rosetta_app=$OPTARG;;
    b)
        rosetta_db=$OPTARG;;
    1)
        Matching="false"
        JdRefine="false"
        Relax="false"
        ;;
    2)
        JdRefine="false"
        Relax="false"
        ;;
    3)
        Relax="false"
        ;;
    ?)
        echo ""
        echo "Error: Do not use undefined options."
        echo ""
        help
        exit;;
    esac
done

jobbasename=`echo "$(basename ${PDBinputPath})-$(basename ${Motifpdb%%.pdb})"`
date >> $jobbasename.log
echo -e "Note: Parsing Input PDB library......\n" >> $jobbasename.log
if [ "$PDBinput"x == "true"x ];then
    PDSlist=$(basename ${PDBinputPath})-Index
    ParseChainLib ${PDBinputPath} $(basename ${PDBinputPath})-Set-to-$Target_ChainName $PDSlist >> $jobbasename.ParseChain.log;
elif [ "$PDSinput"x == "true"x ];then
    PDSlist=$PDSlist
else
    echo "Error: a series pdb files or a PDS index file must be input."; exit
fi


#Master Matching and Complex Generation
function catComplex(){
    pdbname=$(cat $1 | grep "^REMARK" | grep "pds " | awk '{print $3}' | head -n 1 )
    RMSD=`cat $1 | grep "^REMARK" | grep "pds " | awk '{print $2}' | head -n 1`
    region=`cat $1 | grep "^REMARK" | grep "pds " | awk '{print $4}' | head -n 1 | tr -d ['[''('')'']']` 
    complexname="$(basename ${pdbname%%.pds})-$RMSD-$region.pdb"
    cat $2 $1 > $3/$complexname
};export -f catComplex;

function matchingPDS(){
    if [ "$with_gap"x == "true"x ];then
        master --query $3 --target $1 --outType wgap --gapLen ${gap_len} --bbRMSD --structOut $2 --rmsdCut $5 >> $4
    else
        master --query $3 --target $1 --outType full --structOut $2 --rmsdCut $5 >> $4
    fi
    if [ -d "$2" ];then
    for matchedpdb in `ls $2`; do
        catComplex $2/$matchedpdb $6 $7
    done
    rm -r $2
    fi
};export -f matchingPDS

if [ "$Matching"x == "true"x ];then
    date >> $jobbasename.log
    echo -e "Note: creating Input Motif PDS......\n" >> $jobbasename.log
    createPDS --pdb $Motifpdb --type query --cleanPDB >> $jobbasename.log
    cp ${Motifpdb%%.pdb}.pds ./$(basename ${Motifpdb%%.pdb}).pds
    date >> $jobbasename.log
    echo -e "Note: Master Motif Matching......\n" >> $jobbasename.log
    mkdir -p $jobbasename-complex >> $jobbasename.log
    grep -E "^ATOM|^HETATM|^CONECT" $Receptor > ${jobbasename}-receptor.pdb
    cat $PDSlist| parallel -j $CPUnum matchingPDS {} {/.}-MasterOUT $(basename ${Motifpdb%%.pdb}).pds $jobbasename.master.log $rmsdCutoff ${jobbasename}-receptor.pdb $jobbasename-complex
fi

function link_sc_seq(){
    line=$1
    fasta_file=$2
    sequence=`echo $line | awk '{print $1}' | parallel -j 1 grep {} $fasta_file | awk -F: '{print $2}'`
    echo "$line  $sequence"
};export -f link_sc_seq

#Rosetta Jd_2
if [ "$JdRefine"x == "true"x ];then
    date >> $jobbasename.log
    echo -e "Note: Complexes are being refined......\n" >> $jobbasename.log
    mkdir -p $jobbasename-Jd2-OUT >> $jobbasename.log
    ls $jobbasename-complex | parallel -j $CPUnum $rosetta_app/score_jd2.static.linuxgccrelease -database $rosetta_db -in:file:s $jobbasename-complex/{} -out:file:scorefile $jobbasename-score_jd2.sc -out:path:pdb $jobbasename-Jd2-OUT -score:weights ref2015_cart -out:pdb -ex1 -ex2 -ignore_zero_occupancy false -in:ignore_unrecognized_res true -treat_residues_in_these_chains_as_separate_chemical_entities "Z" -no_nstruct_label >> $jobbasename.Jd2.log
    ls $jobbasename-Jd2-OUT | parallel -j $CPUnum $rosetta_app/InterfaceAnalyzer.static.linuxgccrelease -s $jobbasename-Jd2-OUT/{} -tracer_data_print false -out:file:score_only $jobbasename-Jd2_Interface_Score.sc -add_regular_scores_to_scorefile true -sasa_calculator_probe_radius 1.4 -atomic_burial_cutoff 0.01 -interface A_${Target_ChainName} -read_only_ATOM_entries true -pack_separated true -score:weights ref2015_cart -no_nstruct_label true >> $jobbasename.Interface_score.log
    ex_Seq $jobbasename-Jd2-OUT/ >> $jobbasename.log
    echo "FileName  MotifDock_Score  Complex_Repulsive  Interface_SASA_Total  dG_separated_Total  dG_separated/dSASAx100  dSASA_hphobic  Target_side_Score  Interface_unsat_Hbonds  Interface_Hbonds_Energy  dG_cross_Total  dG_cross/dSASAx100  Motif_Seq" > $jobbasename-JD2_interface_score_OUT.sc
    tail -n +3 $jobbasename-Jd2_Interface_Score.sc | awk '$28 != 0 {print $42,$19/1000+$5+$40/5,$19,$10,$7,$8,$9,$40,$12,$21,$5,$6}' | parallel -j $CPUnum link_sc_seq {} $jobbasename-Jd2-OUT.fasta >> $jobbasename-JD2_interface_score_OUT.sc
    awk '{print $42,$29,$7}' $jobbasename-Jd2_Interface_Score.sc | tail -n +2 | sort -nk 3 | head -n $Relax_Num >> $jobbasename.Jd2.out
fi

#Rosetta_Relax
if [ "$Relax"x == "true"x ];then
    date >> $jobbasename.log
    echo -e "Note: Relax and re-Scoring......\n" >> $jobbasename.log
    mkdir -p $jobbasename-Jd2_Relax-OUT >> $jobbasename.log
    awk '$2 != 0 {print $1}' $jobbasename.Jd2.out | parallel -j $CPUnum $rosetta_app/relax.static.linuxgccrelease -database $rosetta_db -in:file:s $jobbasename-Jd2-OUT/{}.pdb -out:file:scorefile $jobbasename-Jd2_relax_score.sc -out:path:pdb $jobbasename-Jd2_Relax-OUT -nstruct $relaxnum -ex1 -ex2aro -ignore_zero_occupancy false -score:weights ref2015_cart -relax:jump_move false -relax:bb_move true -relax:chi_move true -relax:fast -relax:constrain_relax_to_native_coords true -relax:coord_cst_stdev 0.1 -in:file:native $Receptor -no_nstruct_label >> $jobbasename.relax.log
    ls $jobbasename-Jd2_Relax-OUT | parallel -j $CPUnum $rosetta_app/InterfaceAnalyzer.static.linuxgccrelease -s $jobbasename-Jd2_Relax-OUT/{} -tracer_data_print false -out:file:score_only $jobbasename-FINAL_Interface_Score.sc -add_regular_scores_to_scorefile true -pose_metrics::interface_cutoff 8.0 -sasa_calculator_probe_radius 1.4 -atomic_burial_cutoff 0.01 -interface A_${Target_ChainName} -read_only_ATOM_entries true -pack_input true -pack_separated true -score:weights ref2015_cart -no_nstruct_label true >> $jobbasename.Interface_Score_2.log
    echo "FileName  MotifDock_Score  Complex_Repulsive  Interface_SASA_Total  dG_separated_Total  dG_separated/dSASAx100  dSASA_hphobic  Target_side_Score  Interface_unsat_Hbonds  Interface_Hbonds_Energy  dG_cross_Total  dG_cross/dSASAx100"> $jobbasename-FINAL_interface_score_OUT.sc
    tail -n +3 $jobbasename-FINAL_Interface_Score.sc | awk '$28 != 0 {print $42,$19/1000+$5+$40/5,$19,$19,$10,$7,$8,$9,$40,$12,$21,$5,$6}' | parallel -j $CPUnum link_sc_seq {} $jobbasename-Jd2-OUT.fasta >> $jobbasename-FINAL_interface_score_OUT.sc
fi

date >> $jobbasename.log

if [ -f ROSETTA_CRASH.log ]; then
    grep "0001.pdb" ROSETTA_CRASH.log | awk '{print $6}' | parallel -j 3 echo {/} >> CRASH_job
fi

echo "Note: All jobs are finished......" >> $jobbasename.log
